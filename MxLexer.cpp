
// Generated from Mx.g4 by ANTLR 4.13.2


#include "MxLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MxLexerStaticData final {
  MxLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MxLexerStaticData(const MxLexerStaticData&) = delete;
  MxLexerStaticData(MxLexerStaticData&&) = delete;
  MxLexerStaticData& operator=(const MxLexerStaticData&) = delete;
  MxLexerStaticData& operator=(MxLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mxlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<MxLexerStaticData> mxlexerLexerStaticData = nullptr;

void mxlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mxlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(mxlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MxLexerStaticData>(
    std::vector<std::string>{
      "T__0", "FormatString1", "FormatString2", "FormatString3", "FormatString4", 
      "Int", "If", "Else", "Return", "Void", "Bool", "String", "New", "Class", 
      "Null", "True", "False", "This", "For", "While", "Break", "Continue", 
      "LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
      "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
      "RightShift", "Plus", "Minus", "Mul", "Div", "Mod", "And", "Or", "AndAnd", 
      "OrOr", "Caret", "Not", "Tilde", "Question", "Colon", "Semi", "Comma", 
      "Assign", "Equal", "NotEqual", "SelfPlus", "SelfMinus", "Belong", 
      "Yinghao", "Const", "ArrayConst", "IntegerConst", "BoolConst", "StringConst", 
      "Identifier", "Whitespace", "Newline", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'main'", "", "", "", "", "'int'", "'if'", "'else'", "'return'", 
      "'void'", "'bool'", "'string'", "'new'", "'class'", "'null'", "'true'", 
      "'false'", "'this'", "'for'", "'while'", "'break'", "'continue'", 
      "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", 
      "'<<'", "'>>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
      "'||'", "'^'", "'!'", "'~'", "'\\u003F'", "':'", "';'", "','", "'='", 
      "'=='", "'!='", "'++'", "'--'", "'.'", "'\"'"
    },
    std::vector<std::string>{
      "", "", "FormatString1", "FormatString2", "FormatString3", "FormatString4", 
      "Int", "If", "Else", "Return", "Void", "Bool", "String", "New", "Class", 
      "Null", "True", "False", "This", "For", "While", "Break", "Continue", 
      "LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
      "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
      "RightShift", "Plus", "Minus", "Mul", "Div", "Mod", "And", "Or", "AndAnd", 
      "OrOr", "Caret", "Not", "Tilde", "Question", "Colon", "Semi", "Comma", 
      "Assign", "Equal", "NotEqual", "SelfPlus", "SelfMinus", "Belong", 
      "Yinghao", "Const", "ArrayConst", "IntegerConst", "BoolConst", "StringConst", 
      "Identifier", "Whitespace", "Newline", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,67,483,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,153,8,1,10,1,12,1,156,9,1,1,1,1,
  	1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,172,8,2,10,2,12,
  	2,175,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,189,8,3,
  	10,3,12,3,192,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,
  	206,8,4,10,4,12,4,209,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
  	1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
  	1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,
  	1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,
  	1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,
  	1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,
  	1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,
  	1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
  	1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,
  	1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,57,1,57,3,57,390,8,57,
  	1,58,1,58,1,58,1,58,1,58,1,58,5,58,398,8,58,10,58,12,58,401,9,58,1,58,
  	1,58,3,58,405,8,58,1,59,1,59,5,59,409,8,59,10,59,12,59,412,9,59,1,59,
  	3,59,415,8,59,1,60,1,60,3,60,419,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,5,61,429,8,61,10,61,12,61,432,9,61,1,61,1,61,1,62,1,62,5,62,438,
  	8,62,10,62,12,62,441,9,62,1,63,4,63,444,8,63,11,63,12,63,445,1,63,1,63,
  	1,64,1,64,3,64,452,8,64,1,64,3,64,455,8,64,1,64,1,64,1,65,1,65,1,65,1,
  	65,5,65,463,8,65,10,65,12,65,466,9,65,1,65,1,65,1,65,1,65,1,65,1,66,1,
  	66,1,66,1,66,5,66,477,8,66,10,66,12,66,480,9,66,1,66,1,66,1,464,0,67,
  	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
  	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
  	26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
  	75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
  	49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
  	59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,1,0,8,4,0,
  	32,33,35,35,37,91,93,126,1,0,49,57,1,0,48,57,3,0,32,33,35,91,93,126,2,
  	0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,
  	13,521,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
  	11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
  	0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
  	0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
  	43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
  	0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
  	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
  	75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
  	0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
  	0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
  	0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
  	0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
  	0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,1,135,1,0,0,0,
  	3,140,1,0,0,0,5,159,1,0,0,0,7,178,1,0,0,0,9,195,1,0,0,0,11,212,1,0,0,
  	0,13,216,1,0,0,0,15,219,1,0,0,0,17,224,1,0,0,0,19,231,1,0,0,0,21,236,
  	1,0,0,0,23,241,1,0,0,0,25,248,1,0,0,0,27,252,1,0,0,0,29,258,1,0,0,0,31,
  	263,1,0,0,0,33,268,1,0,0,0,35,274,1,0,0,0,37,279,1,0,0,0,39,283,1,0,0,
  	0,41,289,1,0,0,0,43,295,1,0,0,0,45,304,1,0,0,0,47,306,1,0,0,0,49,308,
  	1,0,0,0,51,310,1,0,0,0,53,312,1,0,0,0,55,314,1,0,0,0,57,316,1,0,0,0,59,
  	318,1,0,0,0,61,321,1,0,0,0,63,323,1,0,0,0,65,326,1,0,0,0,67,329,1,0,0,
  	0,69,332,1,0,0,0,71,334,1,0,0,0,73,336,1,0,0,0,75,338,1,0,0,0,77,340,
  	1,0,0,0,79,342,1,0,0,0,81,344,1,0,0,0,83,346,1,0,0,0,85,349,1,0,0,0,87,
  	352,1,0,0,0,89,354,1,0,0,0,91,356,1,0,0,0,93,358,1,0,0,0,95,360,1,0,0,
  	0,97,362,1,0,0,0,99,364,1,0,0,0,101,366,1,0,0,0,103,368,1,0,0,0,105,371,
  	1,0,0,0,107,374,1,0,0,0,109,377,1,0,0,0,111,380,1,0,0,0,113,382,1,0,0,
  	0,115,389,1,0,0,0,117,404,1,0,0,0,119,414,1,0,0,0,121,418,1,0,0,0,123,
  	420,1,0,0,0,125,435,1,0,0,0,127,443,1,0,0,0,129,454,1,0,0,0,131,458,1,
  	0,0,0,133,472,1,0,0,0,135,136,5,109,0,0,136,137,5,97,0,0,137,138,5,105,
  	0,0,138,139,5,110,0,0,139,2,1,0,0,0,140,141,5,102,0,0,141,142,5,34,0,
  	0,142,154,1,0,0,0,143,144,5,92,0,0,144,153,5,110,0,0,145,146,5,92,0,0,
  	146,153,5,92,0,0,147,148,5,92,0,0,148,153,5,34,0,0,149,150,5,36,0,0,150,
  	153,5,36,0,0,151,153,7,0,0,0,152,143,1,0,0,0,152,145,1,0,0,0,152,147,
  	1,0,0,0,152,149,1,0,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,
  	0,154,155,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,0,157,158,5,34,0,0,158,
  	4,1,0,0,0,159,160,5,102,0,0,160,161,5,34,0,0,161,173,1,0,0,0,162,163,
  	5,92,0,0,163,172,5,110,0,0,164,165,5,92,0,0,165,172,5,92,0,0,166,167,
  	5,92,0,0,167,172,5,34,0,0,168,169,5,36,0,0,169,172,5,36,0,0,170,172,7,
  	0,0,0,171,162,1,0,0,0,171,164,1,0,0,0,171,166,1,0,0,0,171,168,1,0,0,0,
  	171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,
  	1,0,0,0,175,173,1,0,0,0,176,177,5,36,0,0,177,6,1,0,0,0,178,190,5,36,0,
  	0,179,180,5,92,0,0,180,189,5,110,0,0,181,182,5,92,0,0,182,189,5,92,0,
  	0,183,184,5,92,0,0,184,189,5,34,0,0,185,186,5,36,0,0,186,189,5,36,0,0,
  	187,189,7,0,0,0,188,179,1,0,0,0,188,181,1,0,0,0,188,183,1,0,0,0,188,185,
  	1,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,
  	0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,5,36,0,0,194,8,1,0,0,0,195,
  	207,5,36,0,0,196,197,5,92,0,0,197,206,5,110,0,0,198,199,5,92,0,0,199,
  	206,5,92,0,0,200,201,5,92,0,0,201,206,5,34,0,0,202,203,5,36,0,0,203,206,
  	5,36,0,0,204,206,7,0,0,0,205,196,1,0,0,0,205,198,1,0,0,0,205,200,1,0,
  	0,0,205,202,1,0,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,
  	208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,34,0,0,211,10,1,
  	0,0,0,212,213,5,105,0,0,213,214,5,110,0,0,214,215,5,116,0,0,215,12,1,
  	0,0,0,216,217,5,105,0,0,217,218,5,102,0,0,218,14,1,0,0,0,219,220,5,101,
  	0,0,220,221,5,108,0,0,221,222,5,115,0,0,222,223,5,101,0,0,223,16,1,0,
  	0,0,224,225,5,114,0,0,225,226,5,101,0,0,226,227,5,116,0,0,227,228,5,117,
  	0,0,228,229,5,114,0,0,229,230,5,110,0,0,230,18,1,0,0,0,231,232,5,118,
  	0,0,232,233,5,111,0,0,233,234,5,105,0,0,234,235,5,100,0,0,235,20,1,0,
  	0,0,236,237,5,98,0,0,237,238,5,111,0,0,238,239,5,111,0,0,239,240,5,108,
  	0,0,240,22,1,0,0,0,241,242,5,115,0,0,242,243,5,116,0,0,243,244,5,114,
  	0,0,244,245,5,105,0,0,245,246,5,110,0,0,246,247,5,103,0,0,247,24,1,0,
  	0,0,248,249,5,110,0,0,249,250,5,101,0,0,250,251,5,119,0,0,251,26,1,0,
  	0,0,252,253,5,99,0,0,253,254,5,108,0,0,254,255,5,97,0,0,255,256,5,115,
  	0,0,256,257,5,115,0,0,257,28,1,0,0,0,258,259,5,110,0,0,259,260,5,117,
  	0,0,260,261,5,108,0,0,261,262,5,108,0,0,262,30,1,0,0,0,263,264,5,116,
  	0,0,264,265,5,114,0,0,265,266,5,117,0,0,266,267,5,101,0,0,267,32,1,0,
  	0,0,268,269,5,102,0,0,269,270,5,97,0,0,270,271,5,108,0,0,271,272,5,115,
  	0,0,272,273,5,101,0,0,273,34,1,0,0,0,274,275,5,116,0,0,275,276,5,104,
  	0,0,276,277,5,105,0,0,277,278,5,115,0,0,278,36,1,0,0,0,279,280,5,102,
  	0,0,280,281,5,111,0,0,281,282,5,114,0,0,282,38,1,0,0,0,283,284,5,119,
  	0,0,284,285,5,104,0,0,285,286,5,105,0,0,286,287,5,108,0,0,287,288,5,101,
  	0,0,288,40,1,0,0,0,289,290,5,98,0,0,290,291,5,114,0,0,291,292,5,101,0,
  	0,292,293,5,97,0,0,293,294,5,107,0,0,294,42,1,0,0,0,295,296,5,99,0,0,
  	296,297,5,111,0,0,297,298,5,110,0,0,298,299,5,116,0,0,299,300,5,105,0,
  	0,300,301,5,110,0,0,301,302,5,117,0,0,302,303,5,101,0,0,303,44,1,0,0,
  	0,304,305,5,40,0,0,305,46,1,0,0,0,306,307,5,41,0,0,307,48,1,0,0,0,308,
  	309,5,91,0,0,309,50,1,0,0,0,310,311,5,93,0,0,311,52,1,0,0,0,312,313,5,
  	123,0,0,313,54,1,0,0,0,314,315,5,125,0,0,315,56,1,0,0,0,316,317,5,60,
  	0,0,317,58,1,0,0,0,318,319,5,60,0,0,319,320,5,61,0,0,320,60,1,0,0,0,321,
  	322,5,62,0,0,322,62,1,0,0,0,323,324,5,62,0,0,324,325,5,61,0,0,325,64,
  	1,0,0,0,326,327,5,60,0,0,327,328,5,60,0,0,328,66,1,0,0,0,329,330,5,62,
  	0,0,330,331,5,62,0,0,331,68,1,0,0,0,332,333,5,43,0,0,333,70,1,0,0,0,334,
  	335,5,45,0,0,335,72,1,0,0,0,336,337,5,42,0,0,337,74,1,0,0,0,338,339,5,
  	47,0,0,339,76,1,0,0,0,340,341,5,37,0,0,341,78,1,0,0,0,342,343,5,38,0,
  	0,343,80,1,0,0,0,344,345,5,124,0,0,345,82,1,0,0,0,346,347,5,38,0,0,347,
  	348,5,38,0,0,348,84,1,0,0,0,349,350,5,124,0,0,350,351,5,124,0,0,351,86,
  	1,0,0,0,352,353,5,94,0,0,353,88,1,0,0,0,354,355,5,33,0,0,355,90,1,0,0,
  	0,356,357,5,126,0,0,357,92,1,0,0,0,358,359,5,63,0,0,359,94,1,0,0,0,360,
  	361,5,58,0,0,361,96,1,0,0,0,362,363,5,59,0,0,363,98,1,0,0,0,364,365,5,
  	44,0,0,365,100,1,0,0,0,366,367,5,61,0,0,367,102,1,0,0,0,368,369,5,61,
  	0,0,369,370,5,61,0,0,370,104,1,0,0,0,371,372,5,33,0,0,372,373,5,61,0,
  	0,373,106,1,0,0,0,374,375,5,43,0,0,375,376,5,43,0,0,376,108,1,0,0,0,377,
  	378,5,45,0,0,378,379,5,45,0,0,379,110,1,0,0,0,380,381,5,46,0,0,381,112,
  	1,0,0,0,382,383,5,34,0,0,383,114,1,0,0,0,384,390,3,119,59,0,385,390,3,
  	123,61,0,386,390,3,121,60,0,387,390,3,29,14,0,388,390,3,117,58,0,389,
  	384,1,0,0,0,389,385,1,0,0,0,389,386,1,0,0,0,389,387,1,0,0,0,389,388,1,
  	0,0,0,390,116,1,0,0,0,391,392,5,123,0,0,392,405,5,125,0,0,393,394,5,123,
  	0,0,394,399,3,115,57,0,395,396,5,44,0,0,396,398,3,115,57,0,397,395,1,
  	0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,
  	401,399,1,0,0,0,402,403,5,125,0,0,403,405,1,0,0,0,404,391,1,0,0,0,404,
  	393,1,0,0,0,405,118,1,0,0,0,406,410,7,1,0,0,407,409,7,2,0,0,408,407,1,
  	0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,415,1,0,0,0,
  	412,410,1,0,0,0,413,415,5,48,0,0,414,406,1,0,0,0,414,413,1,0,0,0,415,
  	120,1,0,0,0,416,419,3,31,15,0,417,419,3,33,16,0,418,416,1,0,0,0,418,417,
  	1,0,0,0,419,122,1,0,0,0,420,430,5,34,0,0,421,422,5,92,0,0,422,429,5,110,
  	0,0,423,424,5,92,0,0,424,429,5,92,0,0,425,426,5,92,0,0,426,429,5,34,0,
  	0,427,429,7,3,0,0,428,421,1,0,0,0,428,423,1,0,0,0,428,425,1,0,0,0,428,
  	427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,
  	0,0,0,432,430,1,0,0,0,433,434,5,34,0,0,434,124,1,0,0,0,435,439,7,4,0,
  	0,436,438,7,5,0,0,437,436,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,
  	440,1,0,0,0,440,126,1,0,0,0,441,439,1,0,0,0,442,444,7,6,0,0,443,442,1,
  	0,0,0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,
  	447,448,6,63,0,0,448,128,1,0,0,0,449,451,5,13,0,0,450,452,5,10,0,0,451,
  	450,1,0,0,0,451,452,1,0,0,0,452,455,1,0,0,0,453,455,5,10,0,0,454,449,
  	1,0,0,0,454,453,1,0,0,0,455,456,1,0,0,0,456,457,6,64,0,0,457,130,1,0,
  	0,0,458,459,5,47,0,0,459,460,5,42,0,0,460,464,1,0,0,0,461,463,9,0,0,0,
  	462,461,1,0,0,0,463,466,1,0,0,0,464,465,1,0,0,0,464,462,1,0,0,0,465,467,
  	1,0,0,0,466,464,1,0,0,0,467,468,5,42,0,0,468,469,5,47,0,0,469,470,1,0,
  	0,0,470,471,6,65,0,0,471,132,1,0,0,0,472,473,5,47,0,0,473,474,5,47,0,
  	0,474,478,1,0,0,0,475,477,8,7,0,0,476,475,1,0,0,0,477,480,1,0,0,0,478,
  	476,1,0,0,0,478,479,1,0,0,0,479,481,1,0,0,0,480,478,1,0,0,0,481,482,6,
  	66,0,0,482,134,1,0,0,0,23,0,152,154,171,173,188,190,205,207,389,399,404,
  	410,414,418,428,430,439,445,451,454,464,478,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mxlexerLexerStaticData = std::move(staticData);
}

}

MxLexer::MxLexer(CharStream *input) : Lexer(input) {
  MxLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mxlexerLexerStaticData->atn, mxlexerLexerStaticData->decisionToDFA, mxlexerLexerStaticData->sharedContextCache);
}

MxLexer::~MxLexer() {
  delete _interpreter;
}

std::string MxLexer::getGrammarFileName() const {
  return "Mx.g4";
}

const std::vector<std::string>& MxLexer::getRuleNames() const {
  return mxlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MxLexer::getChannelNames() const {
  return mxlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MxLexer::getModeNames() const {
  return mxlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MxLexer::getVocabulary() const {
  return mxlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MxLexer::getSerializedATN() const {
  return mxlexerLexerStaticData->serializedATN;
}

const atn::ATN& MxLexer::getATN() const {
  return *mxlexerLexerStaticData->atn;
}




void MxLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mxlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(mxlexerLexerOnceFlag, mxlexerLexerInitialize);
#endif
}
